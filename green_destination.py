# -*- coding: utf-8 -*-
"""Green_destination.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wE72ZqJYc6m5sDXPspN7UjFOUPY46fX4
"""

'''Load CSV File'''
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd

# Replace 'path/to/your/file.csv' with the actual path to your file in Google Drive
try:
  df = pd.read_csv('/content/drive/MyDrive/greendestination.csv')
  display(df.head())
except FileNotFoundError:
  print("Error: File not found. Please check the path to your file in Google Drive.")
''' Import Libraries'''
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
Attrition_rate = df['Attrition'].value_counts()
'''Exploratory Data Analysis'''
df.info()
df.drop('DailyRate', axis=1, inplace=True)
df.drop('HourlyRate', axis=1, inplace=True)
df.drop('Gender', axis=1, inplace=True)
df.drop('PerformanceRating', axis=1, inplace=True)
df.drop('MonthlyRate', axis=1, inplace=True)
df.drop('StandardHours', axis=1, inplace=True)
df.drop('EmployeeCount', axis=1, inplace=True)
df.drop('Over18', axis=1, inplace=True)
df.drop('YearsWithCurrManager', axis=1, inplace=True)
df.drop('TrainingTimesLastYear', axis=1, inplace=True)
df.drop('EmployeeNumber', axis=1, inplace=True)
display('dropping column done')
df.info()
df = pd.get_dummies(df, columns=[
    'BusinessTravel', 'Department', 'EducationField',
    'JobRole', 'MaritalStatus'
], drop_first=True)
display('dummies are done')
df.info()
le = LabelEncoder()
df['Attrition'] = le.fit_transform(df['Attrition'])
df['OverTime'] = le.fit_transform(df['OverTime'])
display('label encoding done')
df.info()
'''checking for non Empty values'''
df.isnull().sum()
'''Random Forest Model'''
X_train, X_test, y_train, y_test = train_test_split(df.drop('Attrition', axis=1), df['Attrition'], test_size=0.2, random_state=42)
preprocessor = ColumnTransformer(
    transformers=[
        ('scaler', StandardScaler(), ['Age','DistanceFromHome', 'Education', 'EnvironmentSatisfaction',
              'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',
              'PercentSalaryHike', 'RelationshipSatisfaction', 'StockOptionLevel',
              'TotalWorkingYears', 'WorkLifeBalance'])])
rf_pipeline = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('classifier', RandomForestClassifier(random_state = 42))
])
display('pipeline')
print(rf_pipeline)
rf_pipeline.fit(X_train, y_train)
accuracy = rf_pipeline.score(X_train, y_train)
print("Accuracy:", accuracy)
'''Factors affecting Attrition '''
x = df.drop('Attrition', axis=1)
y = df['Attrition']
# Get the feature names after preprocessing
processed_feature_names = rf_pipeline.named_steps['preprocessing'].get_feature_names_out()
print(processed_feature_names)
display(' Remove scaler__ prefix from feature names')
processed_feature_names = [name.replace('scaler__', '') for name in processed_feature_names]
print(processed_feature_names)
rf_model = rf_pipeline.named_steps['classifier']
feature_importances = rf_model.feature_importances_
feature_importances_df = pd.DataFrame({'Feature': processed_feature_names, 'Importance': (feature_importances*100)})
display(feature_importances_df)
display(Attrition_rate)
attrition_rate = df['Attrition'].mean()
print(f"Attrition Rate: {attrition_rate:.2%}")
''' plotting a graph for monthly income vs Attrition '''
plt.figure(figsize=(8, 6))
sns.boxplot(x='Attrition', y='MonthlyIncome', data=df)
plt.title('Monthly Income vs. Attrition')
plt.xlabel('Attrition (0: No, 1: Yes)')
plt.ylabel('Monthly Income')
plt.show()

sns.lmplot(x='MonthlyIncome', y='Attrition', data=df, logistic=True, height=10, aspect=1.0, scatter_kws={'s': 20})
plt.title('Monthly Income vs. Attrition')
plt.xlabel('Monthly Income')
plt.ylabel('Attrition Probability')
plt.show()